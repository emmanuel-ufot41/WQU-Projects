# -*- coding: utf-8 -*-
"""MScFE 632 - Machine Learning in Finance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e5-RRCrpasm03GFs62SitZIfJNiWmwoW

## Model Illustrations for Quant Finance

1. LASSO Regression – Feature Selection for Factors

Context:
In quant finance, we often have hundreds of candidate factors (e.g., size, value, momentum, volatility, sentiment). Many are noisy or redundant. LASSO helps select the most predictive subset while regularizing overfitting
"""

# --- Imports for LASSO ---
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LassoCV

# --- Simulated Factor Data ---
np.random.seed(42)
n_assets, n_factors = 200, 10
X = np.random.randn(n_assets, n_factors)  # 10 synthetic factors
returns = np.random.randn(n_assets) * 0.02 + 0.001  # Simulated excess returns

# --- LASSO with Cross-Validation ---
lasso = LassoCV(cv=5, random_state=42).fit(X, returns)

# --- Plot Cross-Validation Path ---
plt.plot(lasso.alphas_, np.mean(lasso.mse_path_, axis=1))
plt.xlabel("Alpha (λ)")
plt.ylabel("Mean Squared Error")
plt.title("LASSO: Cross-Validated Error vs Alpha")
plt.show()

# --- Selected Coefficients ---
print("Optimal Alpha:", lasso.alpha_)
print("Selected Coefficients (non-zero):", lasso.coef_)

"""Interpretation:

Coefficients close to zero → weak/no predictive power.

Non-zero coefficients → candidate alpha signals for a trading strategy.

2. k-Means Clustering – Regime Detection

Context:
Markets exhibit regimes (bull, bear, sideways). k-Means can cluster assets (or time periods) into groups with similar return-volatility profiles.
"""

# --- Imports for k-Means ---
from sklearn.cluster import KMeans

# --- Features: Return + Volatility Proxy ---
volatility_proxy = np.std(X, axis=1)  # using factor std as volatility proxy
features = np.column_stack((returns, volatility_proxy))

# --- Fit k-Means ---
kmeans = KMeans(n_clusters=3, random_state=42).fit(features)

# --- Plot Clusters ---
plt.scatter(features[:,0], features[:,1], c=kmeans.labels_, cmap="viridis", alpha=0.7)
plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1],
            c="red", marker="x", s=200, label="Centroids")
plt.xlabel("Returns")
plt.ylabel("Volatility")
plt.title("k-Means Clustering: Market Regimes")
plt.legend()
plt.show()

# --- Cluster Results ---
print("Cluster Centroids (Return, Volatility):\n", kmeans.cluster_centers_)

"""Interpretation:

Each cluster ≈ market regime.

Traders can tailor strategies (e.g., momentum in bull clusters, hedging in high-volatility clusters).

3. Classification Trees – Predicting Market Direction

Context:
We may want to predict Up vs Down markets based on factor exposures. Classification Trees split data into rules (if/then) to make interpretable forecasts.
"""

# --- Imports for Classification Trees ---
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report

# --- Target: Market Direction (Up/Down) ---
y = (returns > np.median(returns)).astype(int)  # 1 = Up, 0 = Down

# --- Train/Test Split ---
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# --- Train Tree ---
clf = DecisionTreeClassifier(max_depth=3, criterion="gini", random_state=42).fit(X_train, y_train)

# --- Visualize Tree ---
plt.figure(figsize=(12,6))
plot_tree(clf, filled=True, feature_names=[f"Factor{i}" for i in range(n_factors)], class_names=["Down","Up"])
plt.show()

# --- Evaluate Performance ---
y_pred = clf.predict(X_test)
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

"""Interpretation:

The tree shows decision rules (e.g., if Factor3 < 0.2 → Down market).

Output includes precision/recall for predicting market direction.

Final Notes

LASSO: Best for feature selection in high-dimensional factor models.

k-Means: Useful for clustering regimes, portfolios, or investor behaviors.

Classification Trees: Provide transparent trading decision rules.
"""

